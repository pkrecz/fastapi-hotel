services:


  service_api:
    build:
      context: .
    image: hotel_api:1.0
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    expose:
      - "8000"
    depends_on:
      service_db:
        condition: service_healthy
    restart: always
    networks:
      - network-external
      - network-internal


  service_db:
    image: postgres:17.0-bookworm
    env_file:
      - ./.env
    volumes:
      - hotel-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    expose: 
      - "5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}'"]
      interval: 5s
      timeout: 10s
      retries: 6
    networks:
      - network-internal


  service_nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - service_api
    restart: always
    networks:
      - network-external


volumes:
  hotel-data:


networks:
  network-internal:
  network-external:
